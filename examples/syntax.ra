// this is single line comment

/*
* this
* is
* multi-line
* comment 
*/

this_is_a_block_name // blocks map output and define structure

this_block_is_a_variable 
  `content` // same as block but already has a value

contents_might_have_multiple_definitions // e.g. translations
  #ln:en`
    This is content in english
  `
  #ln:ru`
    Этот контент на русском
  `

option_B
  #ln:en`
    Option B
  `
  #ln:ru`
    Вариант Б
  `

this_block_provides_choices
  > `An option` // static
  > option B // or using a variable

THIS_BLOCK_PROVIDES_A_TEXT_INPUT // in caps just for fun
  >

this_block_provides_a_number_input
  >
    !number

this_block_provides_a_number_input_with_constraints
  >
    !number:max=100:min=20

this_block_provides_a_number_input_with_constraints_and_a_default_value
  > 42
    !number:max=100:min=20

this_block_provides_an_email_input
  >
    !pattern:email

block_can_be_nested_to_create_a_sequence
  a_property // any string
    >
  b_property // string, with 42 as its maximum length
    >
      !length:max=24

lists_can_be_created_as_well // maximum of 3 emails
  +>
    !count:max=3
    !format:email=true

block_that_refers_to_another_sequence
  @basic.demographics

// following example shows how to reuse data between blocks

my_initial_block // list of 1 to 30 strings
  +>
    !count:min=1:max=30

another_block // enter number from 0 to 10 for each of the items, default 6
  ...my_initial_block // ellipsis operator will iterate over values from "my initial block" in current context
    > 6
      !number:min=0:max=10

/*
* Declaring your own rules
*/

:my_rule // yes colon at the start of the line means it's a rule definition
  argument_1 // arguments are blocks
    >
      !number // with validated inputs
  argument_2
    > `default`
  // content below will be executed in a sandbox
  #lang:typescript`
    export default function(
      in /* "in" will prepare the inputs */,
      out /* "out" should be called with valid inputs */,
      arg1, arg2 /* "arg1" and "arg2" are your arguments */
    ) {
      in((el, context) => {
        // create UI things here

        // call out with the value if valid
        out('my value');
      });
    }
  `

block_that_uses_the_rule
  >
  !my_rule : argument 1 = 10 : argument 2 = `something`

// следубщий блок использует логический оператор, сравнение и метаданные
// об одном из предыдущих блоков

conditioned_block
  !if:my_initial_block.count > 3
    `
      ## Какой элемент лишний?
    `
    ...my initial block
      >
        !choice:multiple
        !count:min=(my initial block.count - 3)
  !else
    `Все отлично!`

switching_block
  !switch // without a parameter will evaluate expressions for each case
    !case:conditioned_block.count <> 0 // :case accepts exactly one argument "case", so the argument assignment can be omitted
    `Самый неподходящий варинат?`
      ...conditioned_block
        >
          !choice:multiple
    !default
      `Спасибо большое`

another_switching_block
  !switch:conditioned block.count
    !case:case=0 // or a more verbose way same as writing !case:0
      `че то вы ничо нам не написали... :-(`
    !default
      `ну все на этом :-)`

{1:1} // is switching contexts. 1:1 is default one and stands for one entry at once

{N:1} // is common for many apps - multiple enries at once. For example in a note taking app there are N notes for one user

{1:N} // collaborate on one entry

{M:N} // is multiple collaborations