---
source: src/lib/ra_lexer/src/tests.rs
expression: tokens
---
[
    Token {
        kind: Some(
            Comment,
        ),
        len: 30,
        content: " this is single line comment",
        position: (
            [1:0],
            [1:30],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Comment,
        ),
        len: 41,
        content: "\n* this\n* is\n* multi-line\n* comment \n",
        position: (
            [3:0],
            [8:2],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Identifier(
                "this_is_a_block_name",
            ),
        ),
        len: 20,
        content: "this_is_a_block_name",
        position: (
            [10:0],
            [10:20],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Comment,
        ),
        len: 41,
        content: " blocks map output and define structure",
        position: (
            [10:21],
            [10:62],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Identifier(
                "this_block_is_a_variable",
            ),
        ),
        len: 24,
        content: "this_block_is_a_variable",
        position: (
            [12:0],
            [12:24],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            ContentBlock,
        ),
        len: 9,
        content: "content",
        position: (
            [13:2],
            [13:11],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Comment,
        ),
        len: 40,
        content: " same as block but already has a value",
        position: (
            [13:12],
            [13:52],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Identifier(
                "contents_might_have_multiple_definitions",
            ),
        ),
        len: 40,
        content: "contents_might_have_multiple_definitions",
        position: (
            [15:0],
            [15:40],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Comment,
        ),
        len: 20,
        content: " e.g. translations",
        position: (
            [15:41],
            [15:61],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            HashPound,
        ),
        len: 1,
        content: "#",
        position: (
            [16:2],
            [16:3],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Identifier(
                "ln",
            ),
        ),
        len: 2,
        content: "ln",
        position: (
            [16:3],
            [16:5],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Colon,
        ),
        len: 1,
        content: ":",
        position: (
            [16:5],
            [16:6],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Identifier(
                "en",
            ),
        ),
        len: 2,
        content: "en",
        position: (
            [16:6],
            [16:8],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            ContentBlock,
        ),
        len: 36,
        content: "\n    This is content in english\n  ",
        position: (
            [16:8],
            [18:3],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            HashPound,
        ),
        len: 1,
        content: "#",
        position: (
            [19:2],
            [19:3],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Identifier(
                "ln",
            ),
        ),
        len: 2,
        content: "ln",
        position: (
            [19:3],
            [19:5],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Colon,
        ),
        len: 1,
        content: ":",
        position: (
            [19:5],
            [19:6],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Identifier(
                "ru",
            ),
        ),
        len: 2,
        content: "ru",
        position: (
            [19:6],
            [19:8],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            ContentBlock,
        ),
        len: 53,
        content: "\n    Этот контент на русском\n  ",
        position: (
            [19:8],
            [21:3],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Identifier(
                "option_B",
            ),
        ),
        len: 8,
        content: "option_B",
        position: (
            [23:0],
            [23:8],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            HashPound,
        ),
        len: 1,
        content: "#",
        position: (
            [24:2],
            [24:3],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Identifier(
                "ln",
            ),
        ),
        len: 2,
        content: "ln",
        position: (
            [24:3],
            [24:5],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Colon,
        ),
        len: 1,
        content: ":",
        position: (
            [24:5],
            [24:6],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Identifier(
                "en",
            ),
        ),
        len: 2,
        content: "en",
        position: (
            [24:6],
            [24:8],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            ContentBlock,
        ),
        len: 18,
        content: "\n    Option B\n  ",
        position: (
            [24:8],
            [26:3],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            HashPound,
        ),
        len: 1,
        content: "#",
        position: (
            [27:2],
            [27:3],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Identifier(
                "ln",
            ),
        ),
        len: 2,
        content: "ln",
        position: (
            [27:3],
            [27:5],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Colon,
        ),
        len: 1,
        content: ":",
        position: (
            [27:5],
            [27:6],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Identifier(
                "ru",
            ),
        ),
        len: 2,
        content: "ru",
        position: (
            [27:6],
            [27:8],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            ContentBlock,
        ),
        len: 27,
        content: "\n    Вариант Б\n  ",
        position: (
            [27:8],
            [29:3],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Identifier(
                "this_block_provides_choices",
            ),
        ),
        len: 27,
        content: "this_block_provides_choices",
        position: (
            [31:0],
            [31:27],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Greater,
        ),
        len: 1,
        content: ">",
        position: (
            [32:2],
            [32:3],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            ContentBlock,
        ),
        len: 11,
        content: "An option",
        position: (
            [32:4],
            [32:15],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Comment,
        ),
        len: 9,
        content: " static",
        position: (
            [32:16],
            [32:25],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Greater,
        ),
        len: 1,
        content: ">",
        position: (
            [33:2],
            [33:3],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Identifier(
                "option",
            ),
        ),
        len: 6,
        content: "option",
        position: (
            [33:4],
            [33:10],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Identifier(
                "B",
            ),
        ),
        len: 1,
        content: "B",
        position: (
            [33:11],
            [33:12],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Comment,
        ),
        len: 22,
        content: " or using a variable",
        position: (
            [33:13],
            [33:35],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Identifier(
                "THIS_BLOCK_PROVIDES_A_TEXT_INPUT",
            ),
        ),
        len: 32,
        content: "THIS_BLOCK_PROVIDES_A_TEXT_INPUT",
        position: (
            [35:0],
            [35:32],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Comment,
        ),
        len: 23,
        content: " in caps just for fun",
        position: (
            [35:33],
            [35:56],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Greater,
        ),
        len: 1,
        content: ">",
        position: (
            [36:2],
            [36:3],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Identifier(
                "this_block_provides_a_number_input",
            ),
        ),
        len: 34,
        content: "this_block_provides_a_number_input",
        position: (
            [38:0],
            [38:34],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Greater,
        ),
        len: 1,
        content: ">",
        position: (
            [39:2],
            [39:3],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Exclamation,
        ),
        len: 1,
        content: "!",
        position: (
            [40:4],
            [40:5],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Identifier(
                "number",
            ),
        ),
        len: 6,
        content: "number",
        position: (
            [40:5],
            [40:11],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Identifier(
                "this_block_provides_a_number_input_with_constraints",
            ),
        ),
        len: 51,
        content: "this_block_provides_a_number_input_with_constraints",
        position: (
            [42:0],
            [42:51],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Greater,
        ),
        len: 1,
        content: ">",
        position: (
            [43:2],
            [43:3],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Exclamation,
        ),
        len: 1,
        content: "!",
        position: (
            [44:4],
            [44:5],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Identifier(
                "number",
            ),
        ),
        len: 6,
        content: "number",
        position: (
            [44:5],
            [44:11],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Colon,
        ),
        len: 1,
        content: ":",
        position: (
            [44:11],
            [44:12],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Identifier(
                "max",
            ),
        ),
        len: 3,
        content: "max",
        position: (
            [44:12],
            [44:15],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Equals,
        ),
        len: 1,
        content: "=",
        position: (
            [44:15],
            [44:16],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Int(
                100,
            ),
        ),
        len: 3,
        content: "100",
        position: (
            [44:16],
            [44:19],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Colon,
        ),
        len: 1,
        content: ":",
        position: (
            [44:19],
            [44:20],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Identifier(
                "min",
            ),
        ),
        len: 3,
        content: "min",
        position: (
            [44:20],
            [44:23],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Equals,
        ),
        len: 1,
        content: "=",
        position: (
            [44:23],
            [44:24],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Int(
                20,
            ),
        ),
        len: 2,
        content: "20",
        position: (
            [44:24],
            [44:26],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Identifier(
                "this_block_provides_a_number_input_with_constraints_and_a_default_value",
            ),
        ),
        len: 71,
        content: "this_block_provides_a_number_input_with_constraints_and_a_default_value",
        position: (
            [46:0],
            [46:71],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Greater,
        ),
        len: 1,
        content: ">",
        position: (
            [47:2],
            [47:3],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Int(
                42,
            ),
        ),
        len: 2,
        content: "42",
        position: (
            [47:4],
            [47:6],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Exclamation,
        ),
        len: 1,
        content: "!",
        position: (
            [48:4],
            [48:5],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Identifier(
                "number",
            ),
        ),
        len: 6,
        content: "number",
        position: (
            [48:5],
            [48:11],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Colon,
        ),
        len: 1,
        content: ":",
        position: (
            [48:11],
            [48:12],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Identifier(
                "max",
            ),
        ),
        len: 3,
        content: "max",
        position: (
            [48:12],
            [48:15],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Equals,
        ),
        len: 1,
        content: "=",
        position: (
            [48:15],
            [48:16],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Int(
                100,
            ),
        ),
        len: 3,
        content: "100",
        position: (
            [48:16],
            [48:19],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Colon,
        ),
        len: 1,
        content: ":",
        position: (
            [48:19],
            [48:20],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Identifier(
                "min",
            ),
        ),
        len: 3,
        content: "min",
        position: (
            [48:20],
            [48:23],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Equals,
        ),
        len: 1,
        content: "=",
        position: (
            [48:23],
            [48:24],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Int(
                20,
            ),
        ),
        len: 2,
        content: "20",
        position: (
            [48:24],
            [48:26],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Identifier(
                "this_block_provides_an_email_input",
            ),
        ),
        len: 34,
        content: "this_block_provides_an_email_input",
        position: (
            [50:0],
            [50:34],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Greater,
        ),
        len: 1,
        content: ">",
        position: (
            [51:2],
            [51:3],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Exclamation,
        ),
        len: 1,
        content: "!",
        position: (
            [52:4],
            [52:5],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Identifier(
                "pattern",
            ),
        ),
        len: 7,
        content: "pattern",
        position: (
            [52:5],
            [52:12],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Colon,
        ),
        len: 1,
        content: ":",
        position: (
            [52:12],
            [52:13],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Identifier(
                "email",
            ),
        ),
        len: 5,
        content: "email",
        position: (
            [52:13],
            [52:18],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Identifier(
                "block_can_be_nested_to_create_a_sequence",
            ),
        ),
        len: 40,
        content: "block_can_be_nested_to_create_a_sequence",
        position: (
            [54:0],
            [54:40],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Identifier(
                "a_property",
            ),
        ),
        len: 10,
        content: "a_property",
        position: (
            [55:2],
            [55:12],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Comment,
        ),
        len: 13,
        content: " any string",
        position: (
            [55:13],
            [55:26],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Greater,
        ),
        len: 1,
        content: ">",
        position: (
            [56:4],
            [56:5],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Identifier(
                "b_property",
            ),
        ),
        len: 10,
        content: "b_property",
        position: (
            [57:2],
            [57:12],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Comment,
        ),
        len: 40,
        content: " string, with 42 as its maximum length",
        position: (
            [57:13],
            [57:53],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Greater,
        ),
        len: 1,
        content: ">",
        position: (
            [58:4],
            [58:5],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Exclamation,
        ),
        len: 1,
        content: "!",
        position: (
            [59:6],
            [59:7],
        ),
        level: 3,
    },
    Token {
        kind: Some(
            Identifier(
                "length",
            ),
        ),
        len: 6,
        content: "length",
        position: (
            [59:7],
            [59:13],
        ),
        level: 3,
    },
    Token {
        kind: Some(
            Colon,
        ),
        len: 1,
        content: ":",
        position: (
            [59:13],
            [59:14],
        ),
        level: 3,
    },
    Token {
        kind: Some(
            Identifier(
                "max",
            ),
        ),
        len: 3,
        content: "max",
        position: (
            [59:14],
            [59:17],
        ),
        level: 3,
    },
    Token {
        kind: Some(
            Equals,
        ),
        len: 1,
        content: "=",
        position: (
            [59:17],
            [59:18],
        ),
        level: 3,
    },
    Token {
        kind: Some(
            Int(
                24,
            ),
        ),
        len: 2,
        content: "24",
        position: (
            [59:18],
            [59:20],
        ),
        level: 3,
    },
    Token {
        kind: Some(
            Identifier(
                "lists_can_be_created_as_well",
            ),
        ),
        len: 28,
        content: "lists_can_be_created_as_well",
        position: (
            [61:0],
            [61:28],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Comment,
        ),
        len: 22,
        content: " maximum of 3 emails",
        position: (
            [61:29],
            [61:51],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Plus,
        ),
        len: 1,
        content: "+",
        position: (
            [62:2],
            [62:3],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Greater,
        ),
        len: 1,
        content: ">",
        position: (
            [62:3],
            [62:4],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Exclamation,
        ),
        len: 1,
        content: "!",
        position: (
            [63:4],
            [63:5],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Identifier(
                "count",
            ),
        ),
        len: 5,
        content: "count",
        position: (
            [63:5],
            [63:10],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Colon,
        ),
        len: 1,
        content: ":",
        position: (
            [63:10],
            [63:11],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Identifier(
                "max",
            ),
        ),
        len: 3,
        content: "max",
        position: (
            [63:11],
            [63:14],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Equals,
        ),
        len: 1,
        content: "=",
        position: (
            [63:14],
            [63:15],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Int(
                3,
            ),
        ),
        len: 1,
        content: "3",
        position: (
            [63:15],
            [63:16],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Exclamation,
        ),
        len: 1,
        content: "!",
        position: (
            [64:4],
            [64:5],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Identifier(
                "format",
            ),
        ),
        len: 6,
        content: "format",
        position: (
            [64:5],
            [64:11],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Colon,
        ),
        len: 1,
        content: ":",
        position: (
            [64:11],
            [64:12],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Identifier(
                "email",
            ),
        ),
        len: 5,
        content: "email",
        position: (
            [64:12],
            [64:17],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Equals,
        ),
        len: 1,
        content: "=",
        position: (
            [64:17],
            [64:18],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Identifier(
                "true",
            ),
        ),
        len: 4,
        content: "true",
        position: (
            [64:18],
            [64:22],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Identifier(
                "block_that_refers_to_another_sequence",
            ),
        ),
        len: 37,
        content: "block_that_refers_to_another_sequence",
        position: (
            [66:0],
            [66:37],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            At,
        ),
        len: 1,
        content: "@",
        position: (
            [67:2],
            [67:3],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Identifier(
                "basic",
            ),
        ),
        len: 5,
        content: "basic",
        position: (
            [67:3],
            [67:8],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Dot,
        ),
        len: 1,
        content: ".",
        position: (
            [67:8],
            [67:9],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Identifier(
                "demographics",
            ),
        ),
        len: 12,
        content: "demographics",
        position: (
            [67:9],
            [67:21],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Comment,
        ),
        len: 59,
        content: " following example shows how to reuse data between blocks",
        position: (
            [69:0],
            [69:59],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Identifier(
                "my_initial_block",
            ),
        ),
        len: 16,
        content: "my_initial_block",
        position: (
            [71:0],
            [71:16],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Comment,
        ),
        len: 26,
        content: " list of 1 to 30 strings",
        position: (
            [71:17],
            [71:43],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Plus,
        ),
        len: 1,
        content: "+",
        position: (
            [72:2],
            [72:3],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Greater,
        ),
        len: 1,
        content: ">",
        position: (
            [72:3],
            [72:4],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Exclamation,
        ),
        len: 1,
        content: "!",
        position: (
            [73:4],
            [73:5],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Identifier(
                "count",
            ),
        ),
        len: 5,
        content: "count",
        position: (
            [73:5],
            [73:10],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Colon,
        ),
        len: 1,
        content: ":",
        position: (
            [73:10],
            [73:11],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Identifier(
                "min",
            ),
        ),
        len: 3,
        content: "min",
        position: (
            [73:11],
            [73:14],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Equals,
        ),
        len: 1,
        content: "=",
        position: (
            [73:14],
            [73:15],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Int(
                1,
            ),
        ),
        len: 1,
        content: "1",
        position: (
            [73:15],
            [73:16],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Colon,
        ),
        len: 1,
        content: ":",
        position: (
            [73:16],
            [73:17],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Identifier(
                "max",
            ),
        ),
        len: 3,
        content: "max",
        position: (
            [73:17],
            [73:20],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Equals,
        ),
        len: 1,
        content: "=",
        position: (
            [73:20],
            [73:21],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Int(
                30,
            ),
        ),
        len: 2,
        content: "30",
        position: (
            [73:21],
            [73:23],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Identifier(
                "another_block",
            ),
        ),
        len: 13,
        content: "another_block",
        position: (
            [75:0],
            [75:13],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Comment,
        ),
        len: 61,
        content: " enter number from 0 to 10 for each of the items, default 6",
        position: (
            [75:14],
            [75:75],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Dot,
        ),
        len: 1,
        content: ".",
        position: (
            [76:2],
            [76:3],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Dot,
        ),
        len: 1,
        content: ".",
        position: (
            [76:3],
            [76:4],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Dot,
        ),
        len: 1,
        content: ".",
        position: (
            [76:4],
            [76:5],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Identifier(
                "my_initial_block",
            ),
        ),
        len: 16,
        content: "my_initial_block",
        position: (
            [76:5],
            [76:21],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Comment,
        ),
        len: 88,
        content: " ellipsis operator will iterate over values from \"my initial block\" in current context",
        position: (
            [76:22],
            [76:110],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Greater,
        ),
        len: 1,
        content: ">",
        position: (
            [77:4],
            [77:5],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Int(
                6,
            ),
        ),
        len: 1,
        content: "6",
        position: (
            [77:6],
            [77:7],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Exclamation,
        ),
        len: 1,
        content: "!",
        position: (
            [78:6],
            [78:7],
        ),
        level: 3,
    },
    Token {
        kind: Some(
            Identifier(
                "number",
            ),
        ),
        len: 6,
        content: "number",
        position: (
            [78:7],
            [78:13],
        ),
        level: 3,
    },
    Token {
        kind: Some(
            Colon,
        ),
        len: 1,
        content: ":",
        position: (
            [78:13],
            [78:14],
        ),
        level: 3,
    },
    Token {
        kind: Some(
            Identifier(
                "min",
            ),
        ),
        len: 3,
        content: "min",
        position: (
            [78:14],
            [78:17],
        ),
        level: 3,
    },
    Token {
        kind: Some(
            Equals,
        ),
        len: 1,
        content: "=",
        position: (
            [78:17],
            [78:18],
        ),
        level: 3,
    },
    Token {
        kind: Some(
            Int(
                0,
            ),
        ),
        len: 1,
        content: "0",
        position: (
            [78:18],
            [78:19],
        ),
        level: 3,
    },
    Token {
        kind: Some(
            Colon,
        ),
        len: 1,
        content: ":",
        position: (
            [78:19],
            [78:20],
        ),
        level: 3,
    },
    Token {
        kind: Some(
            Identifier(
                "max",
            ),
        ),
        len: 3,
        content: "max",
        position: (
            [78:20],
            [78:23],
        ),
        level: 3,
    },
    Token {
        kind: Some(
            Equals,
        ),
        len: 1,
        content: "=",
        position: (
            [78:23],
            [78:24],
        ),
        level: 3,
    },
    Token {
        kind: Some(
            Int(
                10,
            ),
        ),
        len: 2,
        content: "10",
        position: (
            [78:24],
            [78:26],
        ),
        level: 3,
    },
    Token {
        kind: Some(
            Comment,
        ),
        len: 32,
        content: "\n* Declaring your own rules\n",
        position: (
            [80:0],
            [82:2],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Colon,
        ),
        len: 1,
        content: ":",
        position: (
            [84:0],
            [84:1],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Identifier(
                "my_rule",
            ),
        ),
        len: 7,
        content: "my_rule",
        position: (
            [84:1],
            [84:8],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Comment,
        ),
        len: 66,
        content: " yes colon at the start of the line means it\'s a rule definition",
        position: (
            [84:9],
            [84:75],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Identifier(
                "argument_1",
            ),
        ),
        len: 10,
        content: "argument_1",
        position: (
            [85:2],
            [85:12],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Comment,
        ),
        len: 23,
        content: " arguments are blocks",
        position: (
            [85:13],
            [85:36],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Greater,
        ),
        len: 1,
        content: ">",
        position: (
            [86:4],
            [86:5],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Exclamation,
        ),
        len: 1,
        content: "!",
        position: (
            [87:6],
            [87:7],
        ),
        level: 3,
    },
    Token {
        kind: Some(
            Identifier(
                "number",
            ),
        ),
        len: 6,
        content: "number",
        position: (
            [87:7],
            [87:13],
        ),
        level: 3,
    },
    Token {
        kind: Some(
            Comment,
        ),
        len: 24,
        content: " with validated inputs",
        position: (
            [87:14],
            [87:38],
        ),
        level: 3,
    },
    Token {
        kind: Some(
            Identifier(
                "argument_2",
            ),
        ),
        len: 10,
        content: "argument_2",
        position: (
            [88:2],
            [88:12],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Greater,
        ),
        len: 1,
        content: ">",
        position: (
            [89:4],
            [89:5],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            ContentBlock,
        ),
        len: 9,
        content: "default",
        position: (
            [89:6],
            [89:15],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Comment,
        ),
        len: 46,
        content: " content below will be executed in a sandbox",
        position: (
            [90:2],
            [90:48],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            HashPound,
        ),
        len: 1,
        content: "#",
        position: (
            [91:2],
            [91:3],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Identifier(
                "lang",
            ),
        ),
        len: 4,
        content: "lang",
        position: (
            [91:3],
            [91:7],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Colon,
        ),
        len: 1,
        content: ":",
        position: (
            [91:7],
            [91:8],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Identifier(
                "typescript",
            ),
        ),
        len: 10,
        content: "typescript",
        position: (
            [91:8],
            [91:18],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            ContentBlock,
        ),
        len: 352,
        content: "\n    export default function(\n      in /* \"in\" will prepare the inputs */,\n      out /* \"out\" should be called with valid inputs */,\n      arg1, arg2 /* \"arg1\" and \"arg2\" are your arguments */\n    ) {\n      in((el, context) => {\n        // create UI things here\n\n        // call out with the value if valid\n        out(\'my value\');\n      });\n    }\n  ",
        position: (
            [91:18],
            [104:3],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Identifier(
                "block_that_uses_the_rule",
            ),
        ),
        len: 24,
        content: "block_that_uses_the_rule",
        position: (
            [106:0],
            [106:24],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Greater,
        ),
        len: 1,
        content: ">",
        position: (
            [107:2],
            [107:3],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Exclamation,
        ),
        len: 1,
        content: "!",
        position: (
            [108:2],
            [108:3],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Identifier(
                "my_rule",
            ),
        ),
        len: 7,
        content: "my_rule",
        position: (
            [108:3],
            [108:10],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Colon,
        ),
        len: 1,
        content: ":",
        position: (
            [108:11],
            [108:12],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Identifier(
                "argument",
            ),
        ),
        len: 8,
        content: "argument",
        position: (
            [108:13],
            [108:21],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Int(
                1,
            ),
        ),
        len: 1,
        content: "1",
        position: (
            [108:22],
            [108:23],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Equals,
        ),
        len: 1,
        content: "=",
        position: (
            [108:24],
            [108:25],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Int(
                10,
            ),
        ),
        len: 2,
        content: "10",
        position: (
            [108:26],
            [108:28],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Colon,
        ),
        len: 1,
        content: ":",
        position: (
            [108:29],
            [108:30],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Identifier(
                "argument",
            ),
        ),
        len: 8,
        content: "argument",
        position: (
            [108:31],
            [108:39],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Int(
                2,
            ),
        ),
        len: 1,
        content: "2",
        position: (
            [108:40],
            [108:41],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Equals,
        ),
        len: 1,
        content: "=",
        position: (
            [108:42],
            [108:43],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            ContentBlock,
        ),
        len: 11,
        content: "something",
        position: (
            [108:44],
            [108:55],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Comment,
        ),
        len: 133,
        content: " следубщий блок использует логический оператор, сравнение и метаданные",
        position: (
            [110:0],
            [110:72],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Comment,
        ),
        len: 57,
        content: " об одном из предыдущих блоков",
        position: (
            [111:0],
            [111:32],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Identifier(
                "conditioned_block",
            ),
        ),
        len: 17,
        content: "conditioned_block",
        position: (
            [113:0],
            [113:17],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Exclamation,
        ),
        len: 1,
        content: "!",
        position: (
            [114:2],
            [114:3],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Identifier(
                "if",
            ),
        ),
        len: 2,
        content: "if",
        position: (
            [114:3],
            [114:5],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Colon,
        ),
        len: 1,
        content: ":",
        position: (
            [114:5],
            [114:6],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Identifier(
                "my_initial_block",
            ),
        ),
        len: 16,
        content: "my_initial_block",
        position: (
            [114:6],
            [114:22],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Dot,
        ),
        len: 1,
        content: ".",
        position: (
            [114:22],
            [114:23],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Identifier(
                "count",
            ),
        ),
        len: 5,
        content: "count",
        position: (
            [114:23],
            [114:28],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Greater,
        ),
        len: 1,
        content: ">",
        position: (
            [114:29],
            [114:30],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Int(
                3,
            ),
        ),
        len: 1,
        content: "3",
        position: (
            [114:31],
            [114:32],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            ContentBlock,
        ),
        len: 56,
        content: "\n      ## Какой элемент лишний?\n    ",
        position: (
            [115:4],
            [117:5],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Dot,
        ),
        len: 1,
        content: ".",
        position: (
            [118:4],
            [118:5],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Dot,
        ),
        len: 1,
        content: ".",
        position: (
            [118:5],
            [118:6],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Dot,
        ),
        len: 1,
        content: ".",
        position: (
            [118:6],
            [118:7],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Identifier(
                "my",
            ),
        ),
        len: 2,
        content: "my",
        position: (
            [118:7],
            [118:9],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Identifier(
                "initial",
            ),
        ),
        len: 7,
        content: "initial",
        position: (
            [118:10],
            [118:17],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Identifier(
                "block",
            ),
        ),
        len: 5,
        content: "block",
        position: (
            [118:18],
            [118:23],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Greater,
        ),
        len: 1,
        content: ">",
        position: (
            [119:6],
            [119:7],
        ),
        level: 3,
    },
    Token {
        kind: Some(
            Exclamation,
        ),
        len: 1,
        content: "!",
        position: (
            [120:8],
            [120:9],
        ),
        level: 4,
    },
    Token {
        kind: Some(
            Identifier(
                "choice",
            ),
        ),
        len: 6,
        content: "choice",
        position: (
            [120:9],
            [120:15],
        ),
        level: 4,
    },
    Token {
        kind: Some(
            Colon,
        ),
        len: 1,
        content: ":",
        position: (
            [120:15],
            [120:16],
        ),
        level: 4,
    },
    Token {
        kind: Some(
            Identifier(
                "multiple",
            ),
        ),
        len: 8,
        content: "multiple",
        position: (
            [120:16],
            [120:24],
        ),
        level: 4,
    },
    Token {
        kind: Some(
            Exclamation,
        ),
        len: 1,
        content: "!",
        position: (
            [121:8],
            [121:9],
        ),
        level: 4,
    },
    Token {
        kind: Some(
            Identifier(
                "count",
            ),
        ),
        len: 5,
        content: "count",
        position: (
            [121:9],
            [121:14],
        ),
        level: 4,
    },
    Token {
        kind: Some(
            Colon,
        ),
        len: 1,
        content: ":",
        position: (
            [121:14],
            [121:15],
        ),
        level: 4,
    },
    Token {
        kind: Some(
            Identifier(
                "min",
            ),
        ),
        len: 3,
        content: "min",
        position: (
            [121:15],
            [121:18],
        ),
        level: 4,
    },
    Token {
        kind: Some(
            Equals,
        ),
        len: 1,
        content: "=",
        position: (
            [121:18],
            [121:19],
        ),
        level: 4,
    },
    Token {
        kind: Some(
            OpenParentheses,
        ),
        len: 1,
        content: "(",
        position: (
            [121:19],
            [121:20],
        ),
        level: 4,
    },
    Token {
        kind: Some(
            Identifier(
                "my",
            ),
        ),
        len: 2,
        content: "my",
        position: (
            [121:20],
            [121:22],
        ),
        level: 4,
    },
    Token {
        kind: Some(
            Identifier(
                "initial",
            ),
        ),
        len: 7,
        content: "initial",
        position: (
            [121:23],
            [121:30],
        ),
        level: 4,
    },
    Token {
        kind: Some(
            Identifier(
                "block",
            ),
        ),
        len: 5,
        content: "block",
        position: (
            [121:31],
            [121:36],
        ),
        level: 4,
    },
    Token {
        kind: Some(
            Dot,
        ),
        len: 1,
        content: ".",
        position: (
            [121:36],
            [121:37],
        ),
        level: 4,
    },
    Token {
        kind: Some(
            Identifier(
                "count",
            ),
        ),
        len: 5,
        content: "count",
        position: (
            [121:37],
            [121:42],
        ),
        level: 4,
    },
    Token {
        kind: Some(
            Minus,
        ),
        len: 1,
        content: "-",
        position: (
            [121:43],
            [121:44],
        ),
        level: 4,
    },
    Token {
        kind: Some(
            Int(
                3,
            ),
        ),
        len: 1,
        content: "3",
        position: (
            [121:45],
            [121:46],
        ),
        level: 4,
    },
    Token {
        kind: Some(
            CloseParentheses,
        ),
        len: 1,
        content: ")",
        position: (
            [121:46],
            [121:47],
        ),
        level: 4,
    },
    Token {
        kind: Some(
            Exclamation,
        ),
        len: 1,
        content: "!",
        position: (
            [122:2],
            [122:3],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Identifier(
                "else",
            ),
        ),
        len: 4,
        content: "else",
        position: (
            [122:3],
            [122:7],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            ContentBlock,
        ),
        len: 24,
        content: "Все отлично!",
        position: (
            [123:4],
            [123:18],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Identifier(
                "switching_block",
            ),
        ),
        len: 15,
        content: "switching_block",
        position: (
            [125:0],
            [125:15],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Exclamation,
        ),
        len: 1,
        content: "!",
        position: (
            [126:2],
            [126:3],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Identifier(
                "switch",
            ),
        ),
        len: 6,
        content: "switch",
        position: (
            [126:3],
            [126:9],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Comment,
        ),
        len: 62,
        content: " without a parameter will evaluate expressions for each case",
        position: (
            [126:10],
            [126:72],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Exclamation,
        ),
        len: 1,
        content: "!",
        position: (
            [127:4],
            [127:5],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Identifier(
                "case",
            ),
        ),
        len: 4,
        content: "case",
        position: (
            [127:5],
            [127:9],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Colon,
        ),
        len: 1,
        content: ":",
        position: (
            [127:9],
            [127:10],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Identifier(
                "conditioned_block",
            ),
        ),
        len: 17,
        content: "conditioned_block",
        position: (
            [127:10],
            [127:27],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Dot,
        ),
        len: 1,
        content: ".",
        position: (
            [127:27],
            [127:28],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Identifier(
                "count",
            ),
        ),
        len: 5,
        content: "count",
        position: (
            [127:28],
            [127:33],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Less,
        ),
        len: 1,
        content: "<",
        position: (
            [127:34],
            [127:35],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Greater,
        ),
        len: 1,
        content: ">",
        position: (
            [127:35],
            [127:36],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Int(
                0,
            ),
        ),
        len: 1,
        content: "0",
        position: (
            [127:37],
            [127:38],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Comment,
        ),
        len: 87,
        content: " :case accepts exactly one argument \"case\", so the argument assignment can be omitted",
        position: (
            [127:39],
            [127:126],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            ContentBlock,
        ),
        len: 53,
        content: "Самый неподходящий варинат?",
        position: (
            [128:4],
            [128:33],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Dot,
        ),
        len: 1,
        content: ".",
        position: (
            [129:6],
            [129:7],
        ),
        level: 3,
    },
    Token {
        kind: Some(
            Dot,
        ),
        len: 1,
        content: ".",
        position: (
            [129:7],
            [129:8],
        ),
        level: 3,
    },
    Token {
        kind: Some(
            Dot,
        ),
        len: 1,
        content: ".",
        position: (
            [129:8],
            [129:9],
        ),
        level: 3,
    },
    Token {
        kind: Some(
            Identifier(
                "conditioned_block",
            ),
        ),
        len: 17,
        content: "conditioned_block",
        position: (
            [129:9],
            [129:26],
        ),
        level: 3,
    },
    Token {
        kind: Some(
            Greater,
        ),
        len: 1,
        content: ">",
        position: (
            [130:8],
            [130:9],
        ),
        level: 4,
    },
    Token {
        kind: Some(
            Exclamation,
        ),
        len: 1,
        content: "!",
        position: (
            [131:10],
            [131:11],
        ),
        level: 5,
    },
    Token {
        kind: Some(
            Identifier(
                "choice",
            ),
        ),
        len: 6,
        content: "choice",
        position: (
            [131:11],
            [131:17],
        ),
        level: 5,
    },
    Token {
        kind: Some(
            Colon,
        ),
        len: 1,
        content: ":",
        position: (
            [131:17],
            [131:18],
        ),
        level: 5,
    },
    Token {
        kind: Some(
            Identifier(
                "multiple",
            ),
        ),
        len: 8,
        content: "multiple",
        position: (
            [131:18],
            [131:26],
        ),
        level: 5,
    },
    Token {
        kind: Some(
            Exclamation,
        ),
        len: 1,
        content: "!",
        position: (
            [132:4],
            [132:5],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Identifier(
                "default",
            ),
        ),
        len: 7,
        content: "default",
        position: (
            [132:5],
            [132:12],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            ContentBlock,
        ),
        len: 31,
        content: "Спасибо большое",
        position: (
            [133:6],
            [133:23],
        ),
        level: 3,
    },
    Token {
        kind: Some(
            Identifier(
                "another_switching_block",
            ),
        ),
        len: 23,
        content: "another_switching_block",
        position: (
            [135:0],
            [135:23],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Exclamation,
        ),
        len: 1,
        content: "!",
        position: (
            [136:2],
            [136:3],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Identifier(
                "switch",
            ),
        ),
        len: 6,
        content: "switch",
        position: (
            [136:3],
            [136:9],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Colon,
        ),
        len: 1,
        content: ":",
        position: (
            [136:9],
            [136:10],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Identifier(
                "conditioned",
            ),
        ),
        len: 11,
        content: "conditioned",
        position: (
            [136:10],
            [136:21],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Identifier(
                "block",
            ),
        ),
        len: 5,
        content: "block",
        position: (
            [136:22],
            [136:27],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Dot,
        ),
        len: 1,
        content: ".",
        position: (
            [136:27],
            [136:28],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Identifier(
                "count",
            ),
        ),
        len: 5,
        content: "count",
        position: (
            [136:28],
            [136:33],
        ),
        level: 1,
    },
    Token {
        kind: Some(
            Exclamation,
        ),
        len: 1,
        content: "!",
        position: (
            [137:4],
            [137:5],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Identifier(
                "case",
            ),
        ),
        len: 4,
        content: "case",
        position: (
            [137:5],
            [137:9],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Colon,
        ),
        len: 1,
        content: ":",
        position: (
            [137:9],
            [137:10],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Identifier(
                "case",
            ),
        ),
        len: 4,
        content: "case",
        position: (
            [137:10],
            [137:14],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Equals,
        ),
        len: 1,
        content: "=",
        position: (
            [137:14],
            [137:15],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Int(
                0,
            ),
        ),
        len: 1,
        content: "0",
        position: (
            [137:15],
            [137:16],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Comment,
        ),
        len: 48,
        content: " or a more verbose way same as writing !case:0",
        position: (
            [137:17],
            [137:65],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            ContentBlock,
        ),
        len: 61,
        content: "че то вы ничо нам не написали... :-(",
        position: (
            [138:6],
            [138:44],
        ),
        level: 3,
    },
    Token {
        kind: Some(
            Exclamation,
        ),
        len: 1,
        content: "!",
        position: (
            [139:4],
            [139:5],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            Identifier(
                "default",
            ),
        ),
        len: 7,
        content: "default",
        position: (
            [139:5],
            [139:12],
        ),
        level: 2,
    },
    Token {
        kind: Some(
            ContentBlock,
        ),
        len: 31,
        content: "ну все на этом :-)",
        position: (
            [140:6],
            [140:26],
        ),
        level: 3,
    },
    Token {
        kind: Some(
            OpenCurlyBrace,
        ),
        len: 1,
        content: "{",
        position: (
            [142:0],
            [142:1],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Int(
                1,
            ),
        ),
        len: 1,
        content: "1",
        position: (
            [142:1],
            [142:2],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Colon,
        ),
        len: 1,
        content: ":",
        position: (
            [142:2],
            [142:3],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Int(
                1,
            ),
        ),
        len: 1,
        content: "1",
        position: (
            [142:3],
            [142:4],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            CloseCurlyBrace,
        ),
        len: 1,
        content: "}",
        position: (
            [142:4],
            [142:5],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Comment,
        ),
        len: 77,
        content: " is switching contexts. 1:1 is default one and stands for one entry at once",
        position: (
            [142:6],
            [142:83],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            OpenCurlyBrace,
        ),
        len: 1,
        content: "{",
        position: (
            [144:0],
            [144:1],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Identifier(
                "N",
            ),
        ),
        len: 1,
        content: "N",
        position: (
            [144:1],
            [144:2],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Colon,
        ),
        len: 1,
        content: ":",
        position: (
            [144:2],
            [144:3],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Int(
                1,
            ),
        ),
        len: 1,
        content: "1",
        position: (
            [144:3],
            [144:4],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            CloseCurlyBrace,
        ),
        len: 1,
        content: "}",
        position: (
            [144:4],
            [144:5],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Comment,
        ),
        len: 117,
        content: " is common for many apps - multiple enries at once. For example in a note taking app there are N notes for one user",
        position: (
            [144:6],
            [144:123],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            OpenCurlyBrace,
        ),
        len: 1,
        content: "{",
        position: (
            [146:0],
            [146:1],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Int(
                1,
            ),
        ),
        len: 1,
        content: "1",
        position: (
            [146:1],
            [146:2],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Colon,
        ),
        len: 1,
        content: ":",
        position: (
            [146:2],
            [146:3],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Identifier(
                "N",
            ),
        ),
        len: 1,
        content: "N",
        position: (
            [146:3],
            [146:4],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            CloseCurlyBrace,
        ),
        len: 1,
        content: "}",
        position: (
            [146:4],
            [146:5],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Comment,
        ),
        len: 27,
        content: " collaborate on one entry",
        position: (
            [146:6],
            [146:33],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            OpenCurlyBrace,
        ),
        len: 1,
        content: "{",
        position: (
            [148:0],
            [148:1],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Identifier(
                "M",
            ),
        ),
        len: 1,
        content: "M",
        position: (
            [148:1],
            [148:2],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Colon,
        ),
        len: 1,
        content: ":",
        position: (
            [148:2],
            [148:3],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Identifier(
                "N",
            ),
        ),
        len: 1,
        content: "N",
        position: (
            [148:3],
            [148:4],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            CloseCurlyBrace,
        ),
        len: 1,
        content: "}",
        position: (
            [148:4],
            [148:5],
        ),
        level: 0,
    },
    Token {
        kind: Some(
            Comment,
        ),
        len: 29,
        content: " is multiple collaborations",
        position: (
            [148:6],
            [148:35],
        ),
        level: 0,
    },
]
